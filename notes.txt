
2nd Decemeber

1. Link for how synchronous training works - https://pytorch.org/docs/stable/notes/ddp.html
2. TODO: Figure out why eval at end of training is incorrec for asynchronous training

1st December

Some intial results:

1. MLM training on hate-speech detection: Perplixty ---

Asynchornous : 
a. 1 GPU, 2 proc, 32 batch size each: Eval loss = 356.05, Time = 1442.69 sec
b. 1 GPU, 4 proc, 16 batch size each: Eval loss = 364.44, Time = 1530.95 sec
c. 2 GPU, 2 proc, 32 batch size each: Eval loss = 252.46, 256.68, Time = 670.78 sec
d. 3 GPU, 3 proc, 32 batch size each: Eval loss = 263.60, 274.92, 265.68, Time = 448.63 sec
e. 4 GPU, 4 proc, 32 batch size each: Eval loss = 271.13, 276.38, 282.15, 277.05,Time = 340.29 sec 

Synchronous (not really, it's just one process) : 
a. 1 GPU, 32 batch size: Eval loss = 274.37, Time = 1294.008 sec
b. 1 GPU, 64 batch size: Eval loss = 258.66, Time = 1259.63 sec
c. 2 GPU, 64 total batch size: Eval loss = 248.02, Time = 1126.58 sec

Synchronous :
a. 2 GPU, 64 total batch size: Eval loss: 239.79, 256.04, Time = 819.22 sec
b. 3 GPU, 96 total batch size: Eval loss: 248.08, 246.70, 251.14, TIme = 581.81 sec 
c. 4 GPU, 32*4 total batch size: Eval loss: 254.05, 254.65, 263.18, 248.94, Time = 453.15 sec 


17th Nov

How can we simulate the pretrainig without requiring exorbitant amount of compute?
--- There are two options i think:
1. Pretrain transformers using MLM on very small dataset. The advantage of this is that we'll be able to fully isolate the effects of synchronous vs asynchornous SGD since they are used to train a model from scratch. The downside of this approach is that if the model is pretrained on a very small dataset, the effect of pretraining on the downstream task will be minimal, maybe giving unnoticalable differences between the two distributed optimization methods.
2. Use STILT (i.e. continue pretraining) as a proxy for pretrainig. Again we can use small datasets here which is good for faster experiments. Another advantage is that the net effect of pretraining will still be large on the downstream task, so maybe we can see more clear differences. But one important caveat here is that the two different distributed optimization algorithms will only be applied for a very small fraction of the pretraining, which again risks giving similar models.

Considering all the pros and cons, I think it is better to go with option 2. Firstly, that has been reliably used in the literature before. Second the fine-tuned models with option 2 will be much better performing & useful i.e. closer to actual SOTA. Therefore whatever analysis I do in this project will at least be somewhat useful practically. The first option beards the risk of the analysis being completely useless.
